% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/Sampler_iKernel.R, R/lib_iKernel.R
\name{restricrt_data}
\alias{restricrt_data}
\alias{sampler_MaxWiK}
\alias{iKernelABC}
\alias{Get_iKernel_estimation}
\alias{adjust_psi_t}
\alias{spiderweb_old}
\alias{spiderweb}
\alias{spiderweb_slow}
\title{Function to get Approximate Bayesian Computation based on Maxima Weighted Isolation Kernel mapping}
\usage{
restricrt_data(par.sim, stat.sim, stat.obs, size = 300)

sampler_MaxWiK(
  stat.obs,
  stat.sim,
  par.sim,
  model,
  arg0 = list(),
  size = 500,
  psi_t,
  epsilon,
  nmax = 100,
  include_top = FALSE,
  slowly = FALSE,
  rate = 0.2
)

iKernelABC(
  psi = 40,
  t = 350,
  param,
  stat.sim,
  stat.obs,
  talkative = FALSE,
  check_pos_def = TRUE
)

Get_iKernel_estimation(iKernelABC, par.sim, stat.sim, stat.obs)

adjust_psi_t(
  par.sim,
  stat.sim,
  stat.obs,
  talkative = FALSE,
  check_pos_def = FALSE,
  n_best = 10,
  psi_t = data.frame(psi = as.numeric(sapply(X = c(2:8) * 2, FUN = function(x) rep(x,
    8))), t = rep(c(4, 6, 8, 10, 12, 14, 16, 20), 7)),
  cores = 4
)

spiderweb_old(
  psi = 4,
  t = 35,
  param = param,
  stat.sim = stat.sim,
  stat.obs = stat.obs,
  talkative = FALSE,
  check_pos_def = FALSE,
  n_bullets = 5,
  n_best = 10,
  halfwidth = 0.5,
  epsilon = 0.001
)

spiderweb(
  psi = 4,
  t = 35,
  param = param,
  stat.sim = stat.sim,
  stat.obs = stat.obs,
  talkative = FALSE,
  check_pos_def = FALSE,
  n_bullets = 16,
  n_best = 10,
  halfwidth = 0.5,
  epsilon = 0.001,
  rate = 0.1,
  max_iteration = 5,
  save_web = TRUE
)

spiderweb_slow(
  psi = 4,
  t = 35,
  param = param,
  stat.sim = stat.sim,
  stat.obs = stat.obs,
  talkative = FALSE,
  check_pos_def = FALSE,
  n_bullets = 16,
  n_best = 10,
  halfwidth = 0.5,
  epsilon = 0.001,
  rate = 0.1,
  max_iteration = 15,
  save_web = TRUE
)
}
\arguments{
\item{par.sim}{Data frame of parameters}

\item{stat.sim}{Summary statistics of the simulations (model output)}

\item{stat.obs}{Summary statistics of the observation point}

\item{size}{Number of point to restrict original dataset}

\item{model}{is a function to get output of simulation during sampling}

\item{arg0}{is a list with arguments for a model function, so that arg0 is NOT changed during sampling}

\item{psi_t}{Initial data.frame of  \code{psi} and \code{t}, by default \cr
\code{psi_t = data.frame( psi = as.numeric( sapply( X = c(2:8)*2, FUN = function( x ) rep(x, 8) ) ), t = rep( c(4,6,8,10,12,14,16,20), 7) )}}

\item{epsilon}{Criterion to stop algorithm \code{spiderweb()} that isused to check: \cr
\code{if ( abs( max( sim_tracers ) - sim_previous ) < epsilon ) break}}

\item{nmax}{is maximal number of iterations}

\item{include_top}{Logical to include top points from \code{spider_web()} function to simulate or do not}

\item{slowly}{Logical for two algorithms: slow and fast seekers in sampling}

\item{rate}{Numeric rate from 0 to 1 that gives rate of changing of surround points of proposed max of similarity
or part of changing of network during meta-sampling}

\item{psi}{Integer number. Size of each Voronoi diagram or number of areas/points in the Voronoi diagrams}

\item{t}{Integer number of trees in the Isolation Forest}

\item{param}{or \code{par.sim} - data frame of parameters of the model}

\item{talkative}{Logical parameter to print or do not print messages}

\item{check_pos_def}{Logical parameter to check the Gram matrix is positive definite or do not check}

\item{iKernelABC}{Result of function \code{iKernelABC}}

\item{n_best}{Integer number of the best tracer bullets / points
to consider them at the next algorithmic step}

\item{cores}{Number of available cores for parallel computing}

\item{n_bullets}{Integer number of tracer bullets / additional points between the TWO most distant points}

\item{halfwidth}{Criterion to choose the best tracer points like: \cr
\code{if similarity_of_point >= halfwidth} then it is the point to be included to the poool of the best points}

\item{max_iteration}{Maximal number of iteration in the function}

\item{save_web}{Logical to save or do not save network during meta-sampling}
}
\value{
\code{restricrt_data()} returns the list of: \cr
par.sim - restricted parameters which are close to observation point \cr
stat.sim - restricted stat.sim which are close to observation point

\code{sampler_MaxWiK()} returns the list: \cr
results - results of simulations; \cr
best - the best value of parameter; \cr
MSE_min - minimum of MSE; \cr
number_of_iterations - number of iterations; \cr
time - time of sampling in seconds.

The function \code{iKernelABC()} returns the list of :
\itemize{
\item kernel_mean_embedding is a maxima weighted kernel mean embedding (mapping) related to the observation point;
\item parameters_Matrix_Voronoi is a matrix of information about Voronoi trees (rows - trees, columns - Voronoi points/areas IDs) for parameters data set;
\item parameters_Matrix_iKernel is a matrix of of all points of PARAMETERS in a Hilbert space (rows - points, columns - isolation trees);
\item Hilbert_weights is a weights in Hilbert space to get maxima weighted kernel mean embedding for parameters_Matrix_iKernel;
\item Matrix_iKernel is a matrix of all points of simulations in a Hilbert space (rows - points, columns - isolation trees);
\item iFeature_point is a feature embedding mapping for the OBSERVATION point;
\item similarity is a vector of similarities between the simulation points and observation point;
\item Matrix_Voronoi is a matrix of information about Voronoi trees (rows - trees, columns - Voronoi points/areas IDs);
\item t is a number of trees in the Isolation Forest;
\item psi is a number of areas/points in the Voronoi diagrams
}

\code{Get_iKernel_estimation()} returns list of: \cr
\itemize{
\item iKernel_ABC - parameter estimation based on isolation kernel / weighted sum; \cr
\item K2_ABC_iKernel - parameter estimation based on K2-ABC method with matrix of isolation kernel.
}

\code{adjust_psi_t() } returns adjusted hyper parameters \code{psi} and \code{t} as a data.frame with set of pair \code{psi_t}

The function \code{spiderweb()} returns the list of the next objects:
\itemize{
\item input.parameters the list of all the input parameters for Isolation Kernel ABC method;
\item par.best that is data frame of one point that is the best from all the generated tracer points;
\item par.top that is data frame of n_best points that are the top from all the generated tracer points;
\item sim.top that is numeric vecor of similarities of the top points;
\item sim.best that is numeric value of the similarity of the best tracer point;
tracers_all that is data frame of all the generated tracer points;
\item sim.tracers_all that is numeric vector of similarities of all the generated tacer points;
\item iKernelABC that is result of the function \code{iKernelABC()} given on \code{input parameters}.
}

The function \code{spiderweb()} returns the list of the next objects:
\itemize{
\item input.parameters that is the list of all the input parameters for Isolation Kernel ABC method;
\item iteration that is iteration value when algorithm stopped;
\item network that is network points when algorithm stopped;
\item par.best that is data frame of one point that is the best from all the generated tracer points;
\item sim.best that is numeric value of the similarity of the best tracer point;
\item iKernelABC that is result of the function \code{iKernelABC()} given on \code{input parameters};
\item spiderweb that is the list of all the networks during the meta-sampling.
}

The function \code{spiderweb()} returns the list of the next objects:
\itemize{
\item input.parameters that is the list of all the input parameters for Isolation Kernel ABC method;
\item iteration that is iteration value when algorithm stopped;
\item network that is network points when algorithm stopped;
\item par.best that is data frame of one point that is the best from all the generated tracer points;
\item sim.best that is numeric value of the similarity of the best tracer point;
\item iKernelABC that is result of the function \code{iKernelABC()} given on \code{input parameters};
\item spiderweb that is the list of all the networks during the meta-sampling.
}
}
\description{
\code{restricrt_data()} is based on rejection ABC method to restrict original dataset

The function \code{iKernelABC()} is used to get Approximate Bayesian Computation
based on Maxima Weighted Isolation Kernel mapping.
On given data frame of parameters, statistics of the simulations and an observation,
using the internal parameters psi and t,
the function \code{iKernelABC()} returns the estimation of a parameter corresponding to
Maxima weighted Isolation Kernel ABC method.

The function \code{spiderweb()} itteratively generates tracer points gotten
from \code{sudoku()} algorithm, based on the simple procedure: \cr
\itemize{
\item making a reflection of the top points from the best point, \cr
\item and then generating the point tracers between them, \cr
\item finally, the algorithm chooses again the top points and the best point (\code{sudoku()} function is used),
\item repeat all the steps until condition to be \code{TRUE}: \cr
\code{abs( max( sim_tracers ) - sim_previous ) < epsilon }
}

The function \code{spiderweb()} itteratively generates tracer points gotten
from \code{sudoku()} algorithm, based on the simple procedure: \cr
\itemize{
\item making a reflection of the top points from the best point, \cr
\item and then generating the point tracers between them, \cr
\item finally, the algorithm chooses again the top points and the best point (\code{sudoku()} function is used),
\item repeat all the steps until condition to be \code{TRUE}: \cr
\code{abs( max( sim_tracers ) - sim_previous ) < epsilon }
}

The function \code{spiderweb_slow()} itteratively generates tracer points gotten
from \code{sudoku()} algorithm, based on the simple procedure: \cr
\itemize{
\item making a reflection of the top points from the best point, \cr
\item and then generating the point tracers between them, \cr
\item finally, the algorithm chooses again the top points and the best point (\code{sudoku()} function is used),
\item repeat all the steps until condition to be \code{TRUE}: \cr
\code{abs( min( sim_tracers ) - sim_previous ) < epsilon }
}
}
\section{Functions}{
\itemize{
\item \code{restricrt_data()}: Function to restrict data in the size to accelerate the calculations

\item \code{sampler_MaxWiK()}: Function to generate parameters and simulate a model based on MaxWiK algorithm

\item \code{Get_iKernel_estimation()}: function to get parameter estimation based on isolation kernel

\item \code{adjust_psi_t()}: Function to adjust hyper parameters \code{psi} and \code{t} for isolation kernel ABC

\item \code{spiderweb_old()}: The function to get the best value of parameter corresponding to
Maxima Weighted Isolation Kernel mapping which is related to an observation point

\item \code{spiderweb()}: The function to get the best value of parameter corresponding to
Maxima Weighted Isolation Kernel mapping which is related to an observation point

\item \code{spiderweb_slow()}: The function to get the best value of parameter corresponding to
Maxima Weighted Isolation Kernel mapping which is related to an observation point

}}
\examples{
NULL
NULL
NULL
NULL
NULL
NULL
NULL
NULL
}
